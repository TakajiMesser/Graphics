<?xml version="1.0" encoding="utf-8"?><MapBehavior xmlns:i="http://www.w3.org/2001/XMLSchema-instance" z:Id="1" z:Type="SpiceEngine.Maps.MapBehavior" z:Assembly="SpiceEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" xmlns:z="http://schemas.microsoft.com/2003/10/Serialization/" xmlns="http://schemas.datacontract.org/2004/07/SpiceEngine.Maps"><FilePath i:nil="true" /><Name i:nil="true" /><Responses xmlns:d2p1="http://schemas.datacontract.org/2004/07/SpiceEngine.Scripting.StimResponse" z:Id="2"><d2p1:_items z:Id="3" z:Size="0" /><d2p1:_size>0</d2p1:_size><d2p1:_version>0</d2p1:_version></Responses><RootNode z:Id="4"><Arguments xmlns:d3p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" z:Id="5"><d3p1:_items z:Id="6" z:Size="0" /><d3p1:_size>0</d3p1:_size><d3p1:_version>0</d3p1:_version></Arguments><Children z:Id="7"><_items z:Id="8" z:Size="4"><MapNode z:Id="9"><Arguments xmlns:d6p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" z:Id="10"><d6p1:_items z:Ref="6" i:nil="true" /><d6p1:_size>0</d6p1:_size><d6p1:_version>0</d6p1:_version></Arguments><Children z:Id="11"><_items z:Id="12" z:Size="4"><MapNode z:Id="13"><Arguments xmlns:d9p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" z:Id="14"><d9p1:_items z:Ref="6" i:nil="true" /><d9p1:_size>0</d9p1:_size><d9p1:_version>0</d9p1:_version></Arguments><Children z:Id="15"><_items z:Id="16" z:Size="4"><MapNode z:Id="17"><Arguments xmlns:d12p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" z:Id="18"><d12p1:_items z:Id="19" z:Size="4"><d12p1:anyType z:Id="20" z:Type="System.Single" z:Assembly="0">0.175</d12p1:anyType><d12p1:anyType z:Id="21" z:Type="System.Int32" z:Assembly="0">20</d12p1:anyType><d12p1:anyType i:nil="true" /><d12p1:anyType i:nil="true" /></d12p1:_items><d12p1:_size>2</d12p1:_size><d12p1:_version>1</d12p1:_version></Arguments><Children z:Id="22"><_items z:Id="23" z:Size="0" /><_size>0</_size><_version>0</_version></Children><Content z:Id="24">using OpenTK;
using SpiceEngine.Helpers;
using SpiceEngine.Physics.Bodies;
using SpiceEngine.Scripting.Behaviors;
using SpiceEngine.Utilities;
using System;

namespace Jidai.Resources.Behaviors.Nodes
{
    public class BlockNode : Node
    {
        public float EvadeSpeed { get; set; }
        public int TickCount { get; set; }

        public BlockNode(float evadeSpeed, int tickCount)
        {
            EvadeSpeed = evadeSpeed;
            TickCount = tickCount;
        }

        public override BehaviorStatus Tick(BehaviorContext context)
        {
            var nEvadeTicks = context.GetVariableOrDefault&lt;int&gt;("nEvadeTicks");

            if (nEvadeTicks &gt; 0 &amp;&amp; nEvadeTicks &lt;= TickCount)
            {
                var evadeTranslation = context.GetVariable&lt;Vector3&gt;("evadeTranslation");

                nEvadeTicks++;
                context.SetVariable("nEvadeTicks", nEvadeTicks);

                context.Actor.Rotation = Quaternion.FromAxisAngle(Vector3.Cross(evadeTranslation.Normalized(), -Vector3.UnitZ), 2.0f * (float)Math.PI / TickCount * nEvadeTicks);
                context.Actor.Rotation *= new Quaternion((float)Math.Atan2(evadeTranslation.Y, evadeTranslation.X), 0.0f, 0.0f);
                context.EulerRotation = new Vector3(context.EulerRotation.X, 2.0f * (float)Math.PI / TickCount * nEvadeTicks, context.EulerRotation.Z);

                ((RigidBody3D)context.Body).ApplyVelocity(evadeTranslation);

                return BehaviorStatus.Success;
            }
            else if (nEvadeTicks &gt; TickCount)
            {
                nEvadeTicks = 0;
                context.SetVariable("nEvadeTicks", nEvadeTicks);

                context.Actor.Rotation = Quaternion.Identity;
                context.EulerRotation = new Vector3(context.EulerRotation.X, 0.0f, context.EulerRotation.Z);

                return BehaviorStatus.Failure;
            }
            else if (context.InputProvider.IsPressed(context.InputProvider.InputMapping.Block))
            {
                context.SetVariable("nBlockTicks", 1);

                // Swallow any directional movement inputs
                //context.InputState.SwallowInputs(context.InputProvider.InputMapping.Forward, context.InputProvider.InputMapping.Backward, context.InputProvider.InputMapping.Left, context.InputProvider.InputMapping.Right);
            }
            else if (context.InputProvider.IsDown(context.InputProvider.InputMapping.Block))
            {
                var nBlockTicks = context.GetVariableOrDefault&lt;int&gt;("nBlockTicks");
                nBlockTicks++;

                context.SetVariable("nBlockTicks", nBlockTicks);

                var evadeTranslation = GeometryHelper.GetPressedTranslation(context.Camera, EvadeSpeed, context.InputProvider, context.InputProvider.InputMapping);

                if (evadeTranslation.IsSignificant())
                {
                    nEvadeTicks++;

                    var angle = (float)Math.Atan2(evadeTranslation.Y, evadeTranslation.X);

                    context.Actor.Rotation = new Quaternion(0.0f, 0.0f, (float)Math.Sin(angle / 2), (float)Math.Cos(angle / 2));
                    context.EulerRotation = new Vector3((float)Math.Atan2(evadeTranslation.Y, evadeTranslation.X), context.EulerRotation.Y, context.EulerRotation.Z);
                    ((RigidBody3D)context.Body).ApplyVelocity(evadeTranslation);

                    context.SetVariable("evadeTranslation", evadeTranslation);
                    context.SetVariable("nEvadeTicks", nEvadeTicks);

                    return BehaviorStatus.Success;
                }
            }

            return BehaviorStatus.Failure;
        }

        public override void Reset() { }
    }
}
</Content><InlineAction xmlns:d12p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><InlineCondition xmlns:d12p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><NodeType>Node</NodeType></MapNode><MapNode i:nil="true" /><MapNode i:nil="true" /><MapNode i:nil="true" /></_items><_size>1</_size><_version>1</_version></Children><Content i:nil="true" /><InlineAction xmlns:d9p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><InlineCondition xmlns:d9p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><NodeType>Selector</NodeType></MapNode><MapNode z:Id="25"><Arguments xmlns:d9p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" z:Id="26"><d9p1:_items z:Ref="6" i:nil="true" /><d9p1:_size>0</d9p1:_size><d9p1:_version>0</d9p1:_version></Arguments><Children z:Id="27"><_items z:Id="28" z:Size="4"><MapNode z:Id="29"><Arguments xmlns:d12p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" z:Id="30"><d12p1:_items z:Id="31" z:Size="4"><d12p1:anyType z:Id="32" z:Type="System.Single" z:Assembly="0">0.15</d12p1:anyType><d12p1:anyType z:Id="33" z:Type="System.Single" z:Assembly="0">0.04</d12p1:anyType><d12p1:anyType z:Id="34" z:Type="System.Single" z:Assembly="0">0.1</d12p1:anyType><d12p1:anyType i:nil="true" /></d12p1:_items><d12p1:_size>3</d12p1:_size><d12p1:_version>1</d12p1:_version></Arguments><Children z:Id="35"><_items z:Ref="23" i:nil="true" /><_size>0</_size><_version>0</_version></Children><Content z:Id="36">using OpenTK;
using SpiceEngine.Helpers;
using SpiceEngine.Physics.Bodies;
using SpiceEngine.Scripting.Behaviors;

namespace Jidai.Resources.Behaviors.Nodes
{
    public class MoveNode : Node
    {
        public float RunSpeed { get; set; }
        public float CreepSpeed { get; set; }
        public float WalkSpeed { get; set; }

        public MoveNode(float runSpeed, float creepSpeed, float walkSpeed)
        {
            RunSpeed = runSpeed;
            CreepSpeed = creepSpeed;
            WalkSpeed = walkSpeed;
        }

        public override BehaviorStatus Tick(BehaviorContext context)
        {
            var speed = context.InputProvider.IsDown(context.InputProvider.InputMapping.Run)
                ? RunSpeed
                : context.InputProvider.IsDown(context.InputProvider.InputMapping.Crawl)
                    ? CreepSpeed
                    : WalkSpeed;

            var translation = GeometryHelper.GetHeldTranslation(context.Camera, speed, context.InputProvider, context.InputProvider.InputMapping);

            if (context.InputProvider.IsDown(context.InputProvider.InputMapping.In))
            {
                translation.Z += speed;
            }

            if (context.InputProvider.IsDown(context.InputProvider.InputMapping.Out))
            {
                translation.Z -= speed;
            }

            if (context.InputProvider.IsDown(context.InputProvider.InputMapping.Evade))
            {
                translation.Z += 0.6f;
            }

            if (context.InputProvider.IsDown(context.InputProvider.InputMapping.ItemSlot1))
            {
                context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y + 0.1f, context.EulerRotation.Z);
            }

            if (context.InputProvider.IsDown(context.InputProvider.InputMapping.ItemSlot2))
            {
                context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y - 0.1f, context.EulerRotation.Z);
            }

            if (context.InputProvider.IsDown(context.InputProvider.InputMapping.ItemSlot3))
            {
                context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y, context.EulerRotation.Z + 0.1f);
            }

            if (context.InputProvider.IsDown(context.InputProvider.InputMapping.ItemSlot4))
            {
                context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y, context.EulerRotation.Z - 0.1f);
            }

            //if (translation.IsSignificant())
            //{
                ((RigidBody3D)context.Body).ApplyVelocity(translation);
            //}

            return BehaviorStatus.Success;
        }

        public override void Reset() { }
    }
}
</Content><InlineAction xmlns:d12p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><InlineCondition xmlns:d12p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><NodeType>Node</NodeType></MapNode><MapNode z:Id="37"><Arguments xmlns:d12p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" z:Id="38"><d12p1:_items z:Ref="6" i:nil="true" /><d12p1:_size>0</d12p1:_size><d12p1:_version>0</d12p1:_version></Arguments><Children z:Id="39"><_items z:Ref="23" i:nil="true" /><_size>0</_size><_version>0</_version></Children><Content z:Id="40">using OpenTK;
using SpiceEngine.Scripting.Behaviors;
using System;

namespace Jidai.Resources.Behaviors.Nodes
{
    public class TurnNode : Node
    {
        public override BehaviorStatus Tick(BehaviorContext context)
        {
            var nEvadeTicks = context.ContainsVariable("nEvadeTicks") ? context.GetVariable&lt;int&gt;("nEvadeTicks") : 0;

            // Compare current position to location of mouse, and set rotation to face the mouse
            if (!context.InputProvider.IsDown(context.InputProvider.InputMapping.ItemWheel) &amp;&amp; nEvadeTicks == 0 &amp;&amp; context.InputProvider.IsMouseInWindow)
            {
                var clipSpacePosition = context.Camera.ViewProjectionMatrix.Inverted() * new Vector4(0.0f, 0.0f, 0.0f, 1.0f);//new Vector4(context.Position, 1.0f);
                var screenCoordinates = new Vector2()
                {
                    X = ((clipSpacePosition.X + 1.0f) / 2.0f) * context.InputProvider.WindowSize.Width,
                    Y = ((1.0f - clipSpacePosition.Y) / 2.0f) * context.InputProvider.WindowSize.Height,
                };

                if (context.InputProvider.MouseCoordinates.HasValue)
                {
                    var vectorBetween = context.InputProvider.MouseCoordinates.Value - screenCoordinates;
                    float turnAngle = -(float)Math.Atan2(vectorBetween.Y, vectorBetween.X);

                    // Need to add the angle that the camera's Up vector is turned from Vector3.UnitY
                    turnAngle += (float)Math.Atan2(context.Camera._viewMatrix.Up.Y, context.Camera._viewMatrix.Up.X) - (float)Math.PI / 2.0f;

                    context.Actor.Rotation = new Quaternion(turnAngle, 0.0f, 0.0f);
                    context.EulerRotation = new Vector3(turnAngle, context.EulerRotation.Y, context.EulerRotation.Z);
                }
            }

            return BehaviorStatus.Success;
        }

        public override void Reset() { }
    }
}
</Content><InlineAction xmlns:d12p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><InlineCondition xmlns:d12p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><NodeType>Node</NodeType></MapNode><MapNode i:nil="true" /><MapNode i:nil="true" /></_items><_size>2</_size><_version>2</_version></Children><Content i:nil="true" /><InlineAction xmlns:d9p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><InlineCondition xmlns:d9p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><NodeType>Parallel</NodeType></MapNode><MapNode i:nil="true" /><MapNode i:nil="true" /></_items><_size>2</_size><_version>2</_version></Children><Content i:nil="true" /><InlineAction xmlns:d6p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><InlineCondition xmlns:d6p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><NodeType>Selector</NodeType></MapNode><MapNode i:nil="true" /><MapNode i:nil="true" /><MapNode i:nil="true" /></_items><_size>1</_size><_version>1</_version></Children><Content i:nil="true" /><InlineAction xmlns:d3p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><InlineCondition xmlns:d3p1="http://schemas.datacontract.org/2004/07/System" i:nil="true" /><NodeType>Repeater</NodeType></RootNode></MapBehavior>