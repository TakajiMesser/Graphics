//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpiceEngine.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpiceEngine.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fColor;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = fColor;
        ///}.
        /// </summary>
        internal static string arrow_frag {
            get {
                return ResourceManager.GetString("arrow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///const float LINE_WIDTH = 0.1;
        ///const float MIN_LINE_SCREEN_WIDTH = 0.1;
        ///const float BETWEEN_WIDTH = 0.05;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 45) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///uniform vec3 xDirection;
        ///uniform vec3 yDirection;
        ///uniform vec3 zDirection;
        ///
        ///out vec4 fColor;
        ///
        ///void drawArrow(mat4 viewProjectionMatrix, vec3 position, vec4 color, vec3 direction, vec3 perpendicular)
        ///{
        ///    fColor = color; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string arrow_geom {
            get {
                return ResourceManager.GetString("arrow_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string arrow_vert {
            get {
                return ResourceManager.GetString("arrow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform vec4 overrideColor;
        ///uniform sampler2D mainTexture; 
        ///
        ///in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = texture2D(mainTexture, fUV);
        ///
        ///    if (color.r == 1.0 &amp;&amp; color.g == 1.0 &amp;&amp; color.b == 1.0)
        ///    {
        ///        discard;
        ///    }
        ///	else if (overrideColor.a &gt; 0.0)
        ///	{
        ///		color = overrideColor;
        ///	}
        ///	else
        ///	{
        ///		discard;
        ///	}
        ///}.
        /// </summary>
        internal static string billboard_frag {
            get {
                return ResourceManager.GetString("billboard_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 4) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///out vec2 fUV;
        ///
        ///void main() 
        ///{
        ///    mat4 viewProjectionMatrix = projectionMatrix * viewMatrix;
        ///	vec3 position = gl_in[0].gl_Position.xyz;
        ///
        ///    vec3 toCamera = normalize(cameraPosition - position);
        ///    vec3 up = vec3(0.0, 0.0, -1.0);
        ///    vec3 right = cross(toCamera, up);
        ///
        ///    position -= (right * 0.5);
        ///    gl_Position = viewPr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string billboard_geom {
            get {
                return ResourceManager.GetString("billboard_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D mainTexture;
        ///
        ///in vec4 fColor;
        ///in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    vec4 textureColor = texture2D(mainTexture, fUV);
        ///
        ///    if (textureColor.r == 1.0 &amp;&amp; textureColor.g == 1.0 &amp;&amp; textureColor.b == 1.0)
        ///    {
        ///        discard;
        ///    }
        ///    else
        ///    {
        ///        //color = vec4(1, 0, 0, 1);
        ///        color = fColor;
        ///    }
        ///}.
        /// </summary>
        internal static string billboard_selection_frag {
            get {
                return ResourceManager.GetString("billboard_selection_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 4) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///in vec4[] gColor;
        ///
        ///out vec4 fColor;
        ///out vec2 fUV;
        ///
        ///void main() 
        ///{
        ///    mat4 viewProjectionMatrix = projectionMatrix * viewMatrix;
        ///	vec3 position = gl_in[0].gl_Position.xyz;
        ///
        ///    vec3 toCamera = normalize(cameraPosition - position);
        ///    vec3 up = vec3(0.0, 0.0, -1.0);
        ///    vec3 right = cross(toCamera, up);
        ///
        ///    position -= ( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string billboard_selection_geom {
            get {
                return ResourceManager.GetString("billboard_selection_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 1) in vec4 vColor;
        ///
        ///out vec4 gColor;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///    gColor = vColor;
        ///}.
        /// </summary>
        internal static string billboard_selection_vert {
            get {
                return ResourceManager.GetString("billboard_selection_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string billboard_vert {
            get {
                return ResourceManager.GetString("billboard_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(std140, binding = 0) uniform gameConfig
        ///{
        ///	vec4 near_far;
        ///	float target_fps;
        ///};
        ///
        ///out vec4 color;
        ///in vec2 v_TexCoord;
        ///
        ///uniform sampler2D sourceTexture;		// Source
        ///uniform sampler2D velocityTexture;		// Velocity Texture
        ///uniform sampler2D depthTexture;		// Depth Texture
        ///
        ///uniform float fps_scaler;
        ///
        ///// From: http://graphics.cs.williams.edu/papers/MotionBlurI3D12/McGuire12Blur.pdf
        ///float cone(vec2 X, vec2 Y, vec2 V)
        ///{
        ///	return clamp(1.0 - length(X-Y)/length(V), 0.0, 1.0);
        ///}
        ///
        ///float cylinder(vec2 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string blur_frag {
            get {
                return ResourceManager.GetString("blur_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Cone {
            get {
                object obj = ResourceManager.GetObject("Cone", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Cube {
            get {
                object obj = ResourceManager.GetObject("Cube", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform vec3 ambientColor;
        ///uniform vec3 diffuseColor;
        ///uniform vec3 specularColor;
        ///uniform float specularExponent;
        ///
        ///uniform sampler2D diffuseMap;
        ///uniform sampler2D normalMap;
        ///uniform sampler2D specularMap;
        ///uniform sampler2D parallaxMap;
        ///
        ///uniform int useDiffuseMap;
        ///uniform int useNormalMap;
        ///uniform int useSpecularMap;
        ///uniform int useParallaxMap;
        ///
        ///uniform vec3 cameraPosition;
        ///
        ///in vec3 fPosition;
        ///in vec4 fClipPosition;
        ///in vec4 fPreviousClipPosition;
        ///in vec3 fNormal;
        ///in vec3  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string deferred_frag {
            get {
                return ResourceManager.GetString("deferred_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///layout(triangles) in;
        ///layout(triangle_strip, max_vertices = 3) out;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform mat4 previousModelMatrix;
        ///uniform mat4 previousViewMatrix;
        ///uniform mat4 previousProjectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///uniform vec2 renderSize;
        ///
        ///in vec3 gPosition[];
        ///in vec3 gPreviousPosition[];
        ///in vec3 gNormal[];
        ///in vec3 gTangent[];
        ///in vec4 gColor[];
        ///in vec2 gUV[];
        ///
        ///out vec3 fPosition;
        ///out vec3 fPreviousP [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string deferred_geom {
            get {
                return ResourceManager.GetString("deferred_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform mat4 previousModelMatrix;
        ///uniform mat4 previousViewMatrix;
        ///uniform mat4 previousProjectionMatrix;
        ///
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 1) in vec3 vNormal;
        ///layout(location = 2) in vec3 vTangent;
        ///layout(location = 3) in vec2 vUV;
        ///layout(location = 4) in vec4 vColor;
        ///lay [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string deferred_skinning_vert {
            get {
                return ResourceManager.GetString("deferred_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///layout(vertices = 3) out;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 previousModelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///uniform int useDisplacementTexture;
        ///uniform vec2 renderSize;
        ///
        ///in vec3 cPosition[];
        ///in vec3 cPreviousPosition[];
        ///in vec3 cNormal[];
        ///in vec3 cTangent[];
        ///in vec4 cColor[];
        ///in vec2 cUV[];
        ///
        ///out vec3 ePosition[];
        ///out vec3 ePreviousPosition[];
        ///out vec3 eNormal[];
        ///out vec3 eTangent[];
        ///out vec4 eColor[];
        ///out [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string deferred_tesc {
            get {
                return ResourceManager.GetString("deferred_tesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///layout(triangles, fractional_odd_spacing, ccw) in;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 previousModelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///uniform int useDisplacementTexture;
        ///uniform int displacementTextureUnit;
        ///uniform float displacementStrength = 0.1;
        ///
        ////*layout(std140) uniform MaterialTextures
        ///{
        ///	sampler2D bindlessTexture[80];
        ///};*/
        ///
        ///in vec3 ePosition[];
        ///in vec3 ePreviousPosition[];
        ///in vec3 eNormal[];
        ///in vec3 eTa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string deferred_tese {
            get {
                return ResourceManager.GetString("deferred_tese", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform mat4 previousModelMatrix;
        ///uniform mat4 previousViewMatrix;
        ///uniform mat4 previousProjectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 1) in vec3 vNormal;
        ///layout(location = 2) in vec3 vTangent;
        ///layout(location = 3) in vec2 vUV;
        ///layout(location = 4) in vec4 vColor;
        ///
        ///out vec3 fPosition;
        ///out vec4 fClipPosition;
        ///out vec4 fPreviousClipPosition;
        ///out vec3 fNormal;
        ///out vec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string deferred_vert {
            get {
                return ResourceManager.GetString("deferred_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///#define MATH_PI 3.1415926535897932384626433832795
        ///#define MATH_HALF_PI 1.57079632679489661923132169163975
        ///#define MATH_2_PI 6.283185307179586476925286766559
        ///
        ///layout (local_size_x = 512, local_size_y = 1) in;
        ///
        ///uniform sampler2D source;
        ///writeonly uniform image2D destination;
        ///
        ///shared vec2 cache[gl_WorkGroupSize.x];
        ///
        ///uniform int direction_selector;
        ///uniform int blur_amount;
        ///uniform vec2 texture_size;
        ///
        ///void gaussian() 
        ///{
        ///	uint id = gl_LocalInvocationID.x;
        ///	uint fragmentation = gl_NumWorkGroups.y;
        ///	u [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string dilate_frag {
            get {
                return ResourceManager.GetString("dilate_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap directional_light_billboard {
            get {
                object obj = ResourceManager.GetObject("directional_light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_POINT_LIGHTS = 10;
        ///const int MAX_MATERIALS = 10;
        ///
        ///struct PointLight {
        ///	vec3 position;
        ///	float radius;
        ///	vec3 color;
        ///	float intensity;
        ///};
        ///
        ///struct Material {
        ///	vec3 ambient;
        ///	vec3 diffuse;
        ///	vec3 specular;
        ///	float specularExponent;
        ///};
        ///
        ///layout (std140) uniform PointLightBlock
        ///{
        ///	PointLight pointLights[MAX_POINT_LIGHTS];
        ///};
        ///layout (std140) uniform MaterialBlock
        ///{
        ///	Material materials[MAX_MATERIALS];
        ///};
        ///
        ///uniform sampler2D mainTexture;
        ///uniform sampler2D normalMap [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string forward_frag {
            get {
                return ResourceManager.GetString("forward_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_POINT_LIGHTS = 10;
        ///const int MAX_JOINTS = 32;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///struct PointLight {
        ///	vec3 position;
        ///	float radius;
        ///	vec3 color;
        ///	float intensity;
        ///};
        ///
        ///layout (std140) uniform PointLightBlock
        ///{
        ///	PointLight pointLights[MAX_POINT_LIGHTS];
        ///};
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform mat4 previousModelMatrix;
        ///uniform mat4 previousViewMatrix;
        ///uniform mat4 previousProjectionMatrix;
        ///
        ///uniform int useSkinni [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string forward_vert {
            get {
                return ResourceManager.GetString("forward_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D filterTexture;
        ///uniform vec2 texelStep;
        ///uniform float maxThreshold;
        ///uniform float mulReduction;
        ///uniform float minReduction;
        ///uniform float maxSpan;
        ///
        ///in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    vec3 rgbTL = textureOffset(filterTexture, fUV, ivec2(-1, 1)).rgb;
        ///    vec3 rgbTR = textureOffset(filterTexture, fUV, ivec2(1, 1)).rgb;
        ///    vec3 rgbBL = textureOffset(filterTexture, fUV, ivec2(-1, -1)).rgb;
        ///    vec3 rgbBR = textureOffset(filterTexture, fUV, ivec2(1,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fxaa_frag {
            get {
                return ResourceManager.GetString("fxaa_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///
        ///void main()
        ///{
        ///    mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
        ///
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///    mat4 jointTransform = mat4(0.0);
        ///    for (int i = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fxaa_skinning_vert {
            get {
                return ResourceManager.GetString("fxaa_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    fUV = vec2((vPosition.x + 1.0) * 0.5, (vPosition.y + 1.0) * 0.5);
        ///	gl_Position = vec4(vPosition.x, vPosition.y, vPosition.z, 1.0);
        ///}.
        /// </summary>
        internal static string fxaa_vert {
            get {
                return ResourceManager.GetString("fxaa_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] GenericMaterial {
            get {
                object obj = ResourceManager.GetObject("GenericMaterial", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform float unit;
        ///uniform float length;
        ///uniform float thickness;
        ///uniform vec4 lineUnitColor;
        ///uniform vec4 lineAxisColor;
        ///uniform vec4 line5Color;
        ///uniform vec4 line10Color;
        ///
        ///in vec2 fPosition;
        ///in vec2 fUV;
        ///
        ///layout(location = 0) out vec4 color;
        ///
        ///void main() {
        ///    float x = fract(fUV.x * (1.0f / unit) * length);
        ///    x = min(x, 1.0 - x);
        ///    float xdelta = fwidth(x);
        ///    x = smoothstep(x - xdelta, x + xdelta, thickness);
        ///
        ///    float y = fract(fUV.y * (1.0f / unit) * length);        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string grid_frag {
            get {
                return ResourceManager.GetString("grid_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///uniform float length;
        ///
        ///in vec3 vPosition;
        ///
        ///out vec2 fPosition;
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///	
        ///	fPosition = vPosition.xy * length;
        ///	fUV = vPosition.xy;
        ///}.
        /// </summary>
        internal static string grid_vert {
            get {
                return ResourceManager.GetString("grid_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D sceneTexture;
        ///
        ///in vec2 fUV;
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	vec4 tex = texture(sceneTexture, fUV);
        ///	color = vec4(1.0 - tex.r, 1.0 - tex.g, 1.0 - tex.b, tex.a);
        ///}
        ///.
        /// </summary>
        internal static string invert_frag {
            get {
                return ResourceManager.GetString("invert_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap light_billboard {
            get {
                object obj = ResourceManager.GetObject("light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string light_vert {
            get {
                return ResourceManager.GetString("light_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_SAMPLES = 32;
        ///
        ///uniform sampler2D sceneTexture;
        ///uniform sampler2D velocityTexture;
        ///
        /////uniform float fps_scaler;
        ///
        ///in vec2 fUV;
        ///out vec4 color;
        ///
        ///void main(void)
        ///{
        ///    vec2 velocity = texture(velocityTexture, fUV).rg;
        ///    color = texture(sceneTexture, fUV);
        ///
        ///    for (int i = 1; i &lt; MAX_SAMPLES; i++)
        ///    {
        ///        vec2 offset = velocity * (float(i) / float(MAX_SAMPLES - 1) - 0.5);
        ///        color += texture(sceneTexture, fUV + offset);
        ///    }
        ///    color /= float(MAX_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string myBlur_frag {
            get {
                return ResourceManager.GetString("myBlur_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap point_light_billboard {
            get {
                object obj = ResourceManager.GetObject("point_light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D positionMap;
        ///uniform sampler2D colorMap;
        ///uniform sampler2D normalMap;
        ///uniform sampler2D diffuseMaterial;
        ///uniform sampler2D specularMap;
        ///uniform samplerCube shadowMap;
        ///
        ///uniform vec3 cameraPosition;
        ///uniform vec3 lightPosition;
        ///uniform float lightRadius;
        ///uniform vec3 lightColor;
        ///uniform float lightIntensity;
        ///
        ///layout(location = 0) out vec4 finalColor;
        ///
        ///vec4 computeDiffuseLight(vec3 diffuse, float illuminance, vec3 unitNormal, vec3 unitLight)
        ///{
        ///    float diffuse [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string point_light_frag {
            get {
                return ResourceManager.GetString("point_light_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///uniform vec3 lightPosition;
        ///uniform float lightRadius;
        ///
        ///in vec4 fPosition;
        ///
        ///void main()
        ///{
        ///    vec3 lightToVertex = fPosition.xyz - lightPosition;
        ///    float lightDistance = length(lightToVertex);
        ///    gl_FragDepth = lightDistance / lightRadius;
        ///}.
        /// </summary>
        internal static string point_shadow_frag {
            get {
                return ResourceManager.GetString("point_shadow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///layout (triangles) in;
        ///layout(triangle_strip, max_vertices=18) out;
        ///
        ///uniform mat4 shadowViewMatrices[6];
        ///
        ///out vec4 fPosition;
        ///
        ///void main()
        ///{
        ///	for (int i = 0; i &lt; 6; i++)
        ///    {
        ///        gl_Layer = i;
        ///
        ///        for (int j = 0; j &lt; 3; j++)
        ///        {
        ///            fPosition = gl_in[j].gl_Position;
        ///            gl_Position = shadowViewMatrices[i] * fPosition;
        ///            EmitVertex();
        ///        }
        ///
        ///        EndPrimitive();
        ///    }
        ///}.
        /// </summary>
        internal static string point_shadow_geom {
            get {
                return ResourceManager.GetString("point_shadow_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///
        ///void main()
        ///{
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///    mat4 jointTransform = mat4(0.0);
        ///    for (int i = 0; i &lt; MAX_WEIGHTS; i++)
        ///    {
        ///        jointTransform += jointTransforms[int(vBoneIDs[i])] * vBoneWeights[i];
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string point_shadow_skinning_vert {
            get {
                return ResourceManager.GetString("point_shadow_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///uniform mat4 modelMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///	gl_Position = modelMatrix * vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string point_shadow_vert {
            get {
                return ResourceManager.GetString("point_shadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///out vec4 color;
        ///in vec2 v_TexCoord;
        ///
        ///uniform sampler1D sampler0;
        ///
        ///void main()
        ///{
        ///	vec4 tex = texture(sampler0, v_TexCoord.x);
        ///	color = tex;
        ///}.
        /// </summary>
        internal static string render_1D_frag {
            get {
                return ResourceManager.GetString("render_1D_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///out vec4 color;
        ///in vec2 v_TexCoord;
        ///
        ///uniform sampler2DArray sampler0;
        ///uniform int layer;
        ///
        ///void main()
        ///{	
        ///	vec4 tex = texture(sampler0, vec3(v_TexCoord, layer));
        ///	color = tex;
        ///}.
        /// </summary>
        internal static string render_2D_array_frag {
            get {
                return ResourceManager.GetString("render_2D_array_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D textureSampler;
        ///uniform int channel;
        ///uniform float gamma;
        ///
        ///in vec2 fUV;
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    //color = vec4(1);
        ///	vec4 tex = texture(textureSampler, fUV);
        ///    
        ///	color = vec4((channel &lt; 0) ? tex : vec4(tex[channel]));
        ///    //color = vec4(1.0 - (1.0 - tex.x) * 25.0);
        ///    //color.rgb = pow(color.rgb, vec3(1.0 / gamma));
        ///}.
        /// </summary>
        internal static string render_2D_frag {
            get {
                return ResourceManager.GetString("render_2D_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec2 vPosition;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    fUV = vec2((vPosition.x + 1.0) * 0.5, (vPosition.y + 1.0) * 0.5);
        ///	gl_Position = vec4(vPosition.x, vPosition.y, 0.0, 1.0);
        ///}.
        /// </summary>
        internal static string render_2D_vert {
            get {
                return ResourceManager.GetString("render_2D_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///out vec4 color;
        ///in vec2 v_TexCoord;
        ///
        ///uniform sampler3D sampler0;
        ///uniform int layer;
        ///
        ///void main()
        ///{	
        ///	vec4 tex = texture(sampler0, vec3(v_TexCoord, layer));
        ///	color = tex;
        ///}.
        /// </summary>
        internal static string render_3D_frag {
            get {
                return ResourceManager.GetString("render_3D_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///out vec4 color;
        ///
        ///in vec3 ray;
        ///
        ///uniform samplerCubeArray sampler0;		// Cube Map Array
        ///uniform int layer;
        ///
        ///void main()
        ///{
        ///	color = textureLod(sampler0, vec4(ray, layer), 0);
        ///}.
        /// </summary>
        internal static string render_cube_array_frag {
            get {
                return ResourceManager.GetString("render_cube_array_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///out vec4 color;
        ///
        ///in vec3 ray;
        ///
        ///uniform samplerCube sampler0;		// Cube Map
        ///
        ///void main()
        ///{
        ///	color = texture(sampler0, ray);
        ///}.
        /// </summary>
        internal static string render_cube_frag {
            get {
                return ResourceManager.GetString("render_cube_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 position;
        ///
        ///out vec3 ray;
        ///
        ///uniform mat4 inverseViewPerspectiveMatrix;
        ///
        ///const vec2 data[6] = vec2[]
        ///(
        ///  vec2(-1.0, -1.0),
        ///  vec2( 1.0, -1.0),
        ///  vec2(-1.0,  1.0),
        ///  vec2(-1.0, 1.0),
        ///  vec2(1.0, -1.0),
        ///  vec2(1.0,  1.0)
        ///);
        ///
        ///void main()
        ///{
        ///	vec4 vPosition = vec4(data[gl_VertexID], 0, 1.0);
        ///	vec4 finalPosition = inverseViewPerspectiveMatrix * vPosition;
        ///	ray = finalPosition.xyz;
        ///
        ///    gl_Position = vPosition;
        ///}.
        /// </summary>
        internal static string render_cube_vert {
            get {
                return ResourceManager.GetString("render_cube_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fColor;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = fColor;
        ///}.
        /// </summary>
        internal static string rotation_frag {
            get {
                return ResourceManager.GetString("rotation_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///const float LINE_WIDTH = 0.075;
        ///const float BETWEEN_WIDTH = 0.075;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 45) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///out vec4 fColor;
        ///
        ///void drawArrow(mat4 viewProjectionMatrix, vec3 position, vec4 color, vec3 direction, vec3 perpendicular)
        ///{
        ///    fColor = color;
        ///
        ///    position -= perpendicular * (LINE_WIDTH / 2.0);
        ///    gl_Position = viewProjectionMatrix * vec4(position, 1.0) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string rotation_geom {
            get {
                return ResourceManager.GetString("rotation_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string rotation_vert {
            get {
                return ResourceManager.GetString("rotation_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fColor;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = fColor;
        ///}.
        /// </summary>
        internal static string scale_frag {
            get {
                return ResourceManager.GetString("scale_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///const float LINE_WIDTH = 0.05;
        ///const float BETWEEN_WIDTH = 0.025;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 48) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///out vec4 fColor;
        ///
        ///void drawArrow(mat4 viewProjectionMatrix, vec3 position, vec4 color, vec3 direction, vec3 perpendicular)
        ///{
        ///    fColor = color;
        ///
        ///    position -= perpendicular * (LINE_WIDTH / 2.0);
        ///    gl_Position = viewProjectionMatrix * vec4(position, 1.0); [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string scale_geom {
            get {
                return ResourceManager.GetString("scale_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string scale_vert {
            get {
                return ResourceManager.GetString("scale_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap selected_directional_light {
            get {
                object obj = ResourceManager.GetObject("selected_directional_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap selected_point_light {
            get {
                object obj = ResourceManager.GetObject("selected_point_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap selected_spot_light {
            get {
                object obj = ResourceManager.GetObject("selected_spot_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fId;
        ///
        ///layout(location = 0) out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = vec4(fId.xyz, 1.0);
        ///    //color = vec4(0, 1, 0, 1);
        ///}.
        /// </summary>
        internal static string selection_frag {
            get {
                return ResourceManager.GetString("selection_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 fId;
        ///
        ///void main()
        ///{
        ///    mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
        ///
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string selection_skinning_vert {
            get {
                return ResourceManager.GetString("selection_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 fId;
        ///
        ///void main()
        ///{
        ///    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///	fId = vId;
        ///}.
        /// </summary>
        internal static string selection_vert {
            get {
                return ResourceManager.GetString("selection_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) out vec4 color;
        ///
        ///void main()
        ///{
        ///	color = vec4(1.0);
        ///}.
        /// </summary>
        internal static string simple_frag {
            get {
                return ResourceManager.GetString("simple_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string simple_vert {
            get {
                return ResourceManager.GetString("simple_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform samplerCube mainTexture;
        ///
        ///in vec3 fUV;
        ///
        ///layout(location = 0) out vec4 finalColor;
        ///
        ///void main()
        ///{
        ///	finalColor = texture(mainTexture, fUV);
        ///    //finalColor = vec4(finalColor / 30.0);
        ///    //finalColor = vec4(1.0 - (1.0 - finalColor.x) * 50.0);
        ///}.
        /// </summary>
        internal static string skybox_frag {
            get {
                return ResourceManager.GetString("skybox_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec3 vPosition;
        ///
        ///out vec3 fUV;
        ///
        ///void main()
        ///{
        ///    vec4 position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///    gl_Position = position.xyww;
        ///    fUV = vPosition;
        ///}.
        /// </summary>
        internal static string skybox_vert {
            get {
                return ResourceManager.GetString("skybox_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D mainTexture;
        ///
        ///in vec2 fUV;
        ///
        ///layout(location = 0) out vec4 finalColor;
        ///
        ///void main()
        ///{
        ///	finalColor = texture(mainTexture, fUV);
        ///}.
        /// </summary>
        internal static string skybox2D_frag {
            get {
                return ResourceManager.GetString("skybox2D_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec3 vPosition;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    vec4 position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///
        ///    gl_Position = position.xyww;
        ///    fUV = vec2((vPosition.x + 1.0) * 0.5, (vPosition.y + 1.0) * 0.5);
        ///}.
        /// </summary>
        internal static string skybox2D_vert {
            get {
                return ResourceManager.GetString("skybox2D_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Sphere {
            get {
                object obj = ResourceManager.GetObject("Sphere", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap spot_light_billboard {
            get {
                object obj = ResourceManager.GetObject("spot_light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D positionMap;
        ///uniform sampler2D colorMap;
        ///uniform sampler2D normalMap;
        ///uniform sampler2D diffuseMaterial;
        ///uniform sampler2D specularMap;
        ///uniform sampler2D shadowMap;
        ///
        ///uniform mat4 lightMatrix;
        ///
        ///uniform vec3 cameraPosition;
        ///uniform vec3 lightPosition;
        ///uniform float lightRadius;
        ///uniform float lightHeight;
        ///uniform vec3 lightVector;
        ///uniform float lightCutoffAngle;
        ///uniform vec3 lightColor;
        ///uniform float lightIntensity;
        ///
        ///layout(location = 0) out vec4 finalColor;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string spot_light_frag {
            get {
                return ResourceManager.GetString("spot_light_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D shadowMap;
        ///
        ///in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	float depth = texture(shadowMap, fUV).x;
        ///    depth = 1.0 - (1.0 - depth) * 25.0;
        ///
        ///    color = vec4(depth);
        ///}.
        /// </summary>
        internal static string spot_shadow_frag {
            get {
                return ResourceManager.GetString("spot_shadow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///    mat4 jointTransform = mat4(0.0);
        ///    for (int i = 0; i &lt; MAX_WEIGHTS; i++)
        ///    {
        ///        jointT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string spot_shadow_skinning_vert {
            get {
                return ResourceManager.GetString("spot_shadow_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///    //fUV = vUV;
        ///    fUV = vec2((vPosition.x + 1.0) * 0.5, (vPosition.y + 1.0) * 0.5);
        ///}.
        /// </summary>
        internal static string spot_shadow_vert {
            get {
                return ResourceManager.GetString("spot_shadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Square {
            get {
                object obj = ResourceManager.GetObject("Square", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        internal static string stencil_vert {
            get {
                return ResourceManager.GetString("stencil_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D textureSampler;
        ///
        ///in vec2 fUV;
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	color = texture(textureSampler, fUV);
        ///    //color = vec4(1.0, 0.0, 0.0, 1.0);
        ///}.
        /// </summary>
        internal static string text_frag {
            get {
                return ResourceManager.GetString("text_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform vec2 halfResolution;
        ///
        ///in vec2 vPosition;
        ///in vec2 vUV;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    //vec2 clipSpacePosition = vPosition - vec2();
        ///    gl_Position = vec4((vPosition - halfResolution) / halfResolution, 0.0, 1.0);
        ///    fUV = vUV;
        ///}.
        /// </summary>
        internal static string text_vert {
            get {
                return ResourceManager.GetString("text_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D textureSampler;
        ///
        ///in vec2 fUV;
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	color = texture(textureSampler, fUV);
        ///    //color = vec4(1.0, 0.0, 0.0, 1.0);
        ///}.
        /// </summary>
        internal static string ui_frag {
            get {
                return ResourceManager.GetString("ui_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform vec2 halfResolution;
        ///
        ///in vec2 vPosition;
        ///in vec2 vUV;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    //vec2 clipSpacePosition = vPosition - vec2();
        ///    gl_Position = vec4((vPosition - halfResolution) / halfResolution, 0.0, 1.0);
        ///    fUV = vUV;
        ///}.
        /// </summary>
        internal static string ui_vert {
            get {
                return ResourceManager.GetString("ui_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Interpolated values from the vertex shaders
        ///in vec2 UV;
        ///
        ///// Ouput data
        ///out vec3 color;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform sampler2D myTextureSampler;
        ///
        ///void main(){
        ///
        ///    // Output color = color of the texture at the specified UV
        ///    color = texture( myTextureSampler, UV ).rgb;
        ///}.
        /// </summary>
        internal static string uv_frag {
            get {
                return ResourceManager.GetString("uv_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec2 vertexUV;
        ///
        ///// Output data ; will be interpolated for each fragment.
        ///out vec2 UV;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 MVP;
        ///
        ///void main(){
        ///
        ///    // Output position of the vertex, in clip space : MVP * position
        ///    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
        ///
        ///    // UV of the vertex. No sp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string uv_vert {
            get {
                return ResourceManager.GetString("uv_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap vertex {
            get {
                object obj = ResourceManager.GetObject("vertex", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform float lineThickness;
        ///uniform vec4 lineColor;
        ///uniform float selectedLineThickness;
        ///uniform vec4 selectedLineColor;
        ///
        ///smooth in vec3 gEdgeDistance;
        ///in vec4 fId;
        ///
        ///layout(location = 0) out vec4 color;
        ///
        ///void main()
        ///{
        ///    // For this triangle, find the minimum distance of any corner from the edge
        ///    float distance = min(gEdgeDistance[0], min(gEdgeDistance[1], gEdgeDistance[2]));
        ///
        ///    // Discard any fragments that are not close to the edge
        ///	float thickness = fId.w &lt; 1.0
        ///		? [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string wireframe_frag {
            get {
                return ResourceManager.GetString("wireframe_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(triangles) in;
        ///layout(triangle_strip, max_vertices = 3) out;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec4 gId[];
        ///
        ///smooth out vec3 gEdgeDistance;
        ///out vec4 fId;
        ///
        ///void main()
        ///{
        ///    float a = length(gl_in[1].gl_Position.xyz - gl_in[2].gl_Position.xyz);
        ///    float b = length(gl_in[2].gl_Position.xyz - gl_in[0].gl_Position.xyz);
        ///    float c = length(gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz);
        ///
        ///    float alpha = acos(( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string wireframe_geom {
            get {
                return ResourceManager.GetString("wireframe_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 gId;
        ///
        ///void main()
        ///{
        ///    mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
        ///
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string wireframe_skinning_vert {
            get {
                return ResourceManager.GetString("wireframe_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 gId;
        ///
        ///void main()
        ///{
        ///    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///	gId = vId;
        ///}.
        /// </summary>
        internal static string wireframe_vert {
            get {
                return ResourceManager.GetString("wireframe_vert", resourceCulture);
            }
        }
    }
}
