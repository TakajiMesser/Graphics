using GLWriter.CSharp;
using System;

namespace GLWriter.XML.Types
{
    public enum GLTypes
    {
        None,
        Enum,
        Boolean,
        Bitfield,
        Void,
        Byte,
        UByte,
        Short,
        UShort,
        Int,
        UInt,
        ClampX,
        Sizei,
        Float,
        ClampF,
        Double,
        ClampD,
        EGLClientBufferEXT,
        EGLImageOES,
        Char,
        CharARB,
        HandleARB,
        Half,
        HalfARB,
        Fixed,
        IntPtr,
        IntPtrARB,
        SizeiPtr,
        SizeiPtrARB,
        Int64,
        Int64EXT,
        UInt64,
        UInt64EXT,
        Sync,
        ContextStruct,
        EventStruct,
        DebugProc,
        DebugProcARB,
        DebugProcKHR,
        DebugProcAMD,
        HalfNV,
        VDPauSurfaceNV,
        VulkanProcNV
    }

    public static class GLTypeExtensions
    {
        public static DataTypes ToDataType(this GLTypes glType) => glType switch
        {
            GLTypes.Enum => DataTypes.ENUM,
            GLTypes.Boolean => DataTypes.BOOL,
            GLTypes.Bitfield => DataTypes.UINT,
            GLTypes.Void => DataTypes.VOID,
            GLTypes.Byte => DataTypes.BYTE,
            GLTypes.UByte => DataTypes.BYTE,
            GLTypes.Short => DataTypes.SHORT,
            GLTypes.UShort => DataTypes.USHORT,
            GLTypes.Int => DataTypes.INTEGER,
            GLTypes.UInt => DataTypes.UINT,
            GLTypes.ClampX => DataTypes.INTEGER,
            GLTypes.Sizei => DataTypes.INTEGER,
            GLTypes.Float => DataTypes.FLOAT,
            GLTypes.ClampF => DataTypes.FLOAT,
            GLTypes.Double => DataTypes.DOUBLE,
            GLTypes.ClampD => DataTypes.DOUBLE,
            GLTypes.EGLClientBufferEXT => DataTypes.VOIDPTR,
            GLTypes.EGLImageOES => DataTypes.VOIDPTR,
            GLTypes.Char => DataTypes.CHAR,
            GLTypes.CharARB => DataTypes.CHAR,
            GLTypes.HandleARB =>
#if OSX
                                 DataTypes.VOIDPTR,
#else
                                 DataTypes.UINT,
#endif
            GLTypes.Half => DataTypes.USHORT,
            GLTypes.HalfARB => DataTypes.USHORT,
            GLTypes.Fixed => DataTypes.INTEGER,
            GLTypes.IntPtr => DataTypes.INTPTR,
            GLTypes.IntPtrARB => DataTypes.INTPTR,
            GLTypes.SizeiPtr => DataTypes.INTPTR,
            GLTypes.SizeiPtrARB => DataTypes.INTPTR,
            GLTypes.Int64 => DataTypes.LONG,
            GLTypes.Int64EXT => DataTypes.LONG,
            GLTypes.UInt64 => DataTypes.ULONG,
            GLTypes.UInt64EXT => DataTypes.ULONG,
            GLTypes.Sync => DataTypes.STRUCTPTR,
            GLTypes.ContextStruct => DataTypes.STRUCT,
            GLTypes.EventStruct => DataTypes.STRUCT,
            GLTypes.DebugProc => DataTypes.VOIDPTR,
            GLTypes.DebugProcARB => DataTypes.VOIDPTR,
            GLTypes.DebugProcKHR => DataTypes.VOIDPTR,
            GLTypes.DebugProcAMD => DataTypes.VOIDPTR,
            GLTypes.HalfNV => DataTypes.USHORT,
            GLTypes.VDPauSurfaceNV => DataTypes.INTPTR,
            GLTypes.VulkanProcNV => DataTypes.VOIDPTR,
            _ => DataTypes.None
        };

        public static GLTypes ParseGLType(string text) => text switch
        {
            "GLenum" => GLTypes.Enum,
            "GLboolean" => GLTypes.Boolean,
            "GLbitfield" => GLTypes.Bitfield,
            "GLvoid" => GLTypes.Void,
            "GLbyte" => GLTypes.Byte,
            "GLubyte" => GLTypes.UByte,
            "GLshort" => GLTypes.Short,
            "GLushort" => GLTypes.UShort,
            "GLint" => GLTypes.Int,
            "GLuint" => GLTypes.UInt,
            "GLclampx" => GLTypes.ClampX,
            "GLsizei" => GLTypes.Sizei,
            "GLfloat" => GLTypes.Float,
            "GLclampf" => GLTypes.ClampF,
            "GLdouble" => GLTypes.Double,
            "GLclampd" => GLTypes.ClampD,
            "GLeglClientBufferEXT" => GLTypes.EGLClientBufferEXT,
            "GLeglImageOES" => GLTypes.EGLImageOES,
            "GLchar" => GLTypes.Char,
            "GLcharARB" => GLTypes.CharARB,
            "GLhandleARB" => GLTypes.HandleARB,
            "GLhalf" => GLTypes.Half,
            "GLhalfARB" => GLTypes.HalfARB,
            "GLfixed" => GLTypes.Fixed,
            "GLintptr" => GLTypes.IntPtr,
            "GLintptrARB" => GLTypes.IntPtrARB,
            "GLsizeiptr" => GLTypes.SizeiPtr,
            "GLsizeiptrARB" => GLTypes.SizeiPtrARB,
            "GLint64" => GLTypes.Int64,
            "GLint64EXT" => GLTypes.Int64EXT,
            "GLuint64" => GLTypes.UInt64,
            "GLuint64EXT" => GLTypes.UInt64EXT,
            "GLsync" => GLTypes.Sync,
            "struct _cl_context" => GLTypes.ContextStruct,
            "struct _cl_event" => GLTypes.EventStruct,
            "GLDEBUGPROC" => GLTypes.DebugProc,
            "GLDEBUGPROCARB" => GLTypes.DebugProcAMD,
            "GLDEBUGPROCKHR" => GLTypes.DebugProcKHR,
            "GLDEBUGPROCAMD" => GLTypes.DebugProcAMD,
            "GLhalfNV" => GLTypes.HalfNV,
            "GLvdpauSurfaceNV" => GLTypes.VDPauSurfaceNV,
            "GLVULKANPROCNV" => GLTypes.VulkanProcNV,
            _ => GLTypes.None
        };

        public static string ToText(DataTypes dataType) => dataType switch
        {
            DataTypes.VOID => "void",
            DataTypes.INTEGER => "int",
            DataTypes.SHORT => "short",
            DataTypes.LONG => "long",
            DataTypes.FLOAT => "float",
            DataTypes.DOUBLE => "double",
            DataTypes.BOOL => "bool",
            DataTypes.BYTE => "byte",
            DataTypes.SBYTE => "sbyte",
            DataTypes.UINT => "uint",
            DataTypes.USHORT => "ushort",
            DataTypes.ULONG => "ulong",
            DataTypes.INTEGERPTR => "int*",
            DataTypes.SHORTPTR => "short*",
            DataTypes.LONGPTR => "long*",
            DataTypes.FLOATPTR => "float*",
            DataTypes.DOUBLEPTR => "double*",
            DataTypes.BOOLPTR => "bool*",
            DataTypes.BYTEPTR => "byte*",
            DataTypes.BYTEPTRPTR => "byte**",
            DataTypes.SBYTEPTR => "sbyte*",
            DataTypes.UINTPTR => "uint*",
            DataTypes.USHORTPTR => "ushort*",
            DataTypes.ULONGPTR => "ulong*",
            DataTypes.VOIDPTR => "void*",
            DataTypes.VOIDPTRPTR => "void**",
            DataTypes.INTPTR => "IntPtr",
            DataTypes.OUTINTEGER => "out int",
            DataTypes.OUTINTPTR => "out IntPtr",
            _ => throw new ArgumentOutOfRangeException("Could not convert data type " + dataType),
        };
    }
}
