{"Name":null,"FilePath":null,"RootNode":{"Arguments":[],"NodeType":4,"Children":[{"Arguments":[],"NodeType":2,"Children":[{"Arguments":[],"NodeType":0,"Children":[{"Arguments":[{"Value":[5.0,5.0,-0.5],"Type":"SpiceEngineCore.Geometry.Vector3, SpiceEngine.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"},{"Value":0.1,"Type":"System.Single, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e"}],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"MoveToNode","Contents":"using Newtonsoft.Json;\r\nusing SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class MoveToNode : Node\r\n    {\r\n        public Vector3 Destination { get; private set; }\r\n        public float Speed { get; private set; }\r\n\r\n        [JsonIgnore]\r\n        public float XTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float YTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float ZTolerance { get; set; } = 0.5f;\r\n\r\n        public MoveToNode(Vector3 destination, float speed)\r\n        {\r\n            Destination = destination;\r\n            Speed = speed;\r\n        }\r\n\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            var difference = Destination - context.GetPosition();\r\n\r\n            var reachedDestination = difference.X < XTolerance && difference.X > -XTolerance\r\n                && difference.Y < YTolerance && difference.Y > -YTolerance\r\n                && difference.Z < ZTolerance && difference.Z > -ZTolerance;//!difference.IsSignificant();\r\n\r\n            if (reachedDestination)\r\n            {\r\n                return BehaviorStatus.Success;\r\n            }\r\n            else if (difference.Length < Speed)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference);\r\n            }\r\n            else\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference.Normalized() * Speed);\r\n            }\r\n\r\n            return BehaviorStatus.Running;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}},{"Arguments":[],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"TurnTowardsNode","Contents":"using SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing SpiceEngineCore.Entities.Actors;\r\nusing SpiceEngineCore.Utilities;\r\nusing System;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class TurnTowardsNode : Node\r\n    {\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            if (context.GetEntity() is IActor actor)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n\r\n                if (body.LinearVelocity.IsSignificant())\r\n                {\r\n                    float turnAngle = (float)Math.Atan2(body.LinearVelocity.Y, body.LinearVelocity.X);\r\n\r\n                    actor.Rotation = new Quaternion(0.0f, 0.0f, turnAngle);\r\n                    context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y, turnAngle);\r\n                }\r\n            }\r\n\r\n            return BehaviorStatus.Success;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}}],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":null},{"Arguments":[],"NodeType":0,"Children":[{"Arguments":[{"Value":[5.0,-5.0,-0.5],"Type":"SpiceEngineCore.Geometry.Vector3, SpiceEngine.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"},{"Value":0.1,"Type":"System.Single, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e"}],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"MoveToNode","Contents":"using Newtonsoft.Json;\r\nusing SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class MoveToNode : Node\r\n    {\r\n        public Vector3 Destination { get; private set; }\r\n        public float Speed { get; private set; }\r\n\r\n        [JsonIgnore]\r\n        public float XTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float YTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float ZTolerance { get; set; } = 0.5f;\r\n\r\n        public MoveToNode(Vector3 destination, float speed)\r\n        {\r\n            Destination = destination;\r\n            Speed = speed;\r\n        }\r\n\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            var difference = Destination - context.GetPosition();\r\n\r\n            var reachedDestination = difference.X < XTolerance && difference.X > -XTolerance\r\n                && difference.Y < YTolerance && difference.Y > -YTolerance\r\n                && difference.Z < ZTolerance && difference.Z > -ZTolerance;//!difference.IsSignificant();\r\n\r\n            if (reachedDestination)\r\n            {\r\n                return BehaviorStatus.Success;\r\n            }\r\n            else if (difference.Length < Speed)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference);\r\n            }\r\n            else\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference.Normalized() * Speed);\r\n            }\r\n\r\n            return BehaviorStatus.Running;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}},{"Arguments":[],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"TurnTowardsNode","Contents":"using SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing SpiceEngineCore.Entities.Actors;\r\nusing SpiceEngineCore.Utilities;\r\nusing System;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class TurnTowardsNode : Node\r\n    {\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            if (context.GetEntity() is IActor actor)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n\r\n                if (body.LinearVelocity.IsSignificant())\r\n                {\r\n                    float turnAngle = (float)Math.Atan2(body.LinearVelocity.Y, body.LinearVelocity.X);\r\n\r\n                    actor.Rotation = new Quaternion(0.0f, 0.0f, turnAngle);\r\n                    context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y, turnAngle);\r\n                }\r\n            }\r\n\r\n            return BehaviorStatus.Success;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}}],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":null},{"Arguments":[],"NodeType":0,"Children":[{"Arguments":[{"Value":[-5.0,-5.0,-0.5],"Type":"SpiceEngineCore.Geometry.Vector3, SpiceEngine.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"},{"Value":0.1,"Type":"System.Single, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e"}],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"MoveToNode","Contents":"using Newtonsoft.Json;\r\nusing SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class MoveToNode : Node\r\n    {\r\n        public Vector3 Destination { get; private set; }\r\n        public float Speed { get; private set; }\r\n\r\n        [JsonIgnore]\r\n        public float XTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float YTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float ZTolerance { get; set; } = 0.5f;\r\n\r\n        public MoveToNode(Vector3 destination, float speed)\r\n        {\r\n            Destination = destination;\r\n            Speed = speed;\r\n        }\r\n\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            var difference = Destination - context.GetPosition();\r\n\r\n            var reachedDestination = difference.X < XTolerance && difference.X > -XTolerance\r\n                && difference.Y < YTolerance && difference.Y > -YTolerance\r\n                && difference.Z < ZTolerance && difference.Z > -ZTolerance;//!difference.IsSignificant();\r\n\r\n            if (reachedDestination)\r\n            {\r\n                return BehaviorStatus.Success;\r\n            }\r\n            else if (difference.Length < Speed)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference);\r\n            }\r\n            else\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference.Normalized() * Speed);\r\n            }\r\n\r\n            return BehaviorStatus.Running;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}},{"Arguments":[],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"TurnTowardsNode","Contents":"using SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing SpiceEngineCore.Entities.Actors;\r\nusing SpiceEngineCore.Utilities;\r\nusing System;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class TurnTowardsNode : Node\r\n    {\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            if (context.GetEntity() is IActor actor)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n\r\n                if (body.LinearVelocity.IsSignificant())\r\n                {\r\n                    float turnAngle = (float)Math.Atan2(body.LinearVelocity.Y, body.LinearVelocity.X);\r\n\r\n                    actor.Rotation = new Quaternion(0.0f, 0.0f, turnAngle);\r\n                    context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y, turnAngle);\r\n                }\r\n            }\r\n\r\n            return BehaviorStatus.Success;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}}],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":null},{"Arguments":[],"NodeType":0,"Children":[{"Arguments":[{"Value":[-5.0,5.0,-0.5],"Type":"SpiceEngineCore.Geometry.Vector3, SpiceEngine.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"},{"Value":0.1,"Type":"System.Single, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e"}],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"MoveToNode","Contents":"using Newtonsoft.Json;\r\nusing SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class MoveToNode : Node\r\n    {\r\n        public Vector3 Destination { get; private set; }\r\n        public float Speed { get; private set; }\r\n\r\n        [JsonIgnore]\r\n        public float XTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float YTolerance { get; set; } = 0.1f;\r\n\r\n        [JsonIgnore]\r\n        public float ZTolerance { get; set; } = 0.5f;\r\n\r\n        public MoveToNode(Vector3 destination, float speed)\r\n        {\r\n            Destination = destination;\r\n            Speed = speed;\r\n        }\r\n\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            var difference = Destination - context.GetPosition();\r\n\r\n            var reachedDestination = difference.X < XTolerance && difference.X > -XTolerance\r\n                && difference.Y < YTolerance && difference.Y > -YTolerance\r\n                && difference.Z < ZTolerance && difference.Z > -ZTolerance;//!difference.IsSignificant();\r\n\r\n            if (reachedDestination)\r\n            {\r\n                return BehaviorStatus.Success;\r\n            }\r\n            else if (difference.Length < Speed)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference);\r\n            }\r\n            else\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n                body.ApplyVelocity(difference.Normalized() * Speed);\r\n            }\r\n\r\n            return BehaviorStatus.Running;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}},{"Arguments":[],"NodeType":7,"Children":[],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":{"Name":"TurnTowardsNode","Contents":"using SavoryPhysicsCore;\r\nusing SavoryPhysicsCore.Bodies;\r\nusing SpiceEngineCore.Entities.Actors;\r\nusing SpiceEngineCore.Utilities;\r\nusing System;\r\nusing UmamiScriptingCore;\r\nusing UmamiScriptingCore.Behaviors;\r\nusing UmamiScriptingCore.Behaviors.Nodes;\r\n\r\nusing Color4 = SpiceEngineCore.Geometry.Color4;\r\nusing Matrix2 = SpiceEngineCore.Geometry.Matrix2;\r\nusing Matrix3 = SpiceEngineCore.Geometry.Matrix3;\r\nusing Matrix4 = SpiceEngineCore.Geometry.Matrix4;\r\nusing Quaternion = SpiceEngineCore.Geometry.Quaternion;\r\nusing Vector2 = SpiceEngineCore.Geometry.Vector2;\r\nusing Vector3 = SpiceEngineCore.Geometry.Vector3;\r\nusing Vector4 = SpiceEngineCore.Geometry.Vector4;\r\n\r\nnamespace TowerWarfare.Resources.Behaviors.Nodes\r\n{\r\n    public class TurnTowardsNode : Node\r\n    {\r\n        public override BehaviorStatus Tick(BehaviorContext context)\r\n        {\r\n            if (context.GetEntity() is IActor actor)\r\n            {\r\n                var body = context.GetComponent<IBody>() as RigidBody;\r\n\r\n                if (body.LinearVelocity.IsSignificant())\r\n                {\r\n                    float turnAngle = (float)Math.Atan2(body.LinearVelocity.Y, body.LinearVelocity.X);\r\n\r\n                    actor.Rotation = new Quaternion(0.0f, 0.0f, turnAngle);\r\n                    context.EulerRotation = new Vector3(context.EulerRotation.X, context.EulerRotation.Y, turnAngle);\r\n                }\r\n            }\r\n\r\n            return BehaviorStatus.Success;\r\n        }\r\n\r\n        public override void Reset() { }\r\n    }\r\n}\r\n"}}],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":null}],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":null}],"InlineCondition":null,"InlineAction":null,"LeafType":null,"Script":null},"Responses":[]}