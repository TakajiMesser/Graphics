//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpiceEngine.Full.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpiceEngine.Full.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fColor;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = fColor;
        ///}.
        /// </summary>
        public static string arrow_frag {
            get {
                return ResourceManager.GetString("arrow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///const float LINE_WIDTH = 0.1;
        ///const float MIN_LINE_SCREEN_WIDTH = 0.1;
        ///const float BETWEEN_WIDTH = 0.05;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 45) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///uniform vec3 xDirection;
        ///uniform vec3 yDirection;
        ///uniform vec3 zDirection;
        ///
        ///out vec4 fColor;
        ///
        ///void drawArrow(mat4 viewProjectionMatrix, vec3 position, vec4 color, vec3 direction, vec3 perpendicular)
        ///{
        ///    fColor = color; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string arrow_geom {
            get {
                return ResourceManager.GetString("arrow_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        public static string arrow_vert {
            get {
                return ResourceManager.GetString("arrow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] Cone {
            get {
                object obj = ResourceManager.GetObject("Cone", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] Cube {
            get {
                object obj = ResourceManager.GetObject("Cube", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap directional_light_billboard {
            get {
                object obj = ResourceManager.GetObject("directional_light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] GenericMaterial {
            get {
                object obj = ResourceManager.GetObject("GenericMaterial", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform float unit;
        ///uniform float length;
        ///uniform float thickness;
        ///uniform vec4 lineUnitColor;
        ///uniform vec4 lineAxisColor;
        ///uniform vec4 line5Color;
        ///uniform vec4 line10Color;
        ///
        ///in vec2 fPosition;
        ///in vec2 fUV;
        ///
        ///layout(location = 0) out vec4 color;
        ///
        ///void main() {
        ///    float x = fract(fUV.x * (1.0f / unit) * length);
        ///    x = min(x, 1.0 - x);
        ///    float xdelta = fwidth(x);
        ///    x = smoothstep(x - xdelta, x + xdelta, thickness);
        ///
        ///    float y = fract(fUV.y * (1.0f / unit) * length);        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string grid_frag {
            get {
                return ResourceManager.GetString("grid_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///uniform float length;
        ///
        ///in vec3 vPosition;
        ///
        ///out vec2 fPosition;
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///	
        ///	fPosition = vPosition.xy * length;
        ///	fUV = vPosition.xy;
        ///}.
        /// </summary>
        public static string grid_vert {
            get {
                return ResourceManager.GetString("grid_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap light_billboard {
            get {
                object obj = ResourceManager.GetObject("light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        public static string light_vert {
            get {
                return ResourceManager.GetString("light_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap point_light_billboard {
            get {
                object obj = ResourceManager.GetObject("point_light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D positionMap;
        ///uniform sampler2D colorMap;
        ///uniform sampler2D normalMap;
        ///uniform sampler2D diffuseMaterial;
        ///uniform sampler2D specularMap;
        ///uniform samplerCube shadowMap;
        ///
        ///uniform vec3 cameraPosition;
        ///uniform vec3 lightPosition;
        ///uniform float lightRadius;
        ///uniform vec3 lightColor;
        ///uniform float lightIntensity;
        ///
        ///layout(location = 0) out vec4 finalColor;
        ///
        ///vec4 computeDiffuseLight(vec3 diffuse, float illuminance, vec3 unitNormal, vec3 unitLight)
        ///{
        ///    float diffuse [rest of string was truncated]&quot;;.
        /// </summary>
        public static string point_light_frag {
            get {
                return ResourceManager.GetString("point_light_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///uniform vec3 lightPosition;
        ///uniform float lightRadius;
        ///
        ///in vec4 fPosition;
        ///
        ///void main()
        ///{
        ///    vec3 lightToVertex = fPosition.xyz - lightPosition;
        ///    float lightDistance = length(lightToVertex);
        ///    gl_FragDepth = lightDistance / lightRadius;
        ///}.
        /// </summary>
        public static string point_shadow_frag {
            get {
                return ResourceManager.GetString("point_shadow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///layout (triangles) in;
        ///layout(triangle_strip, max_vertices=18) out;
        ///
        ///uniform mat4 shadowViewMatrices[6];
        ///
        ///out vec4 fPosition;
        ///
        ///void main()
        ///{
        ///	for (int i = 0; i &lt; 6; i++)
        ///    {
        ///        gl_Layer = i;
        ///
        ///        for (int j = 0; j &lt; 3; j++)
        ///        {
        ///            fPosition = gl_in[j].gl_Position;
        ///            gl_Position = shadowViewMatrices[i] * fPosition;
        ///            EmitVertex();
        ///        }
        ///
        ///        EndPrimitive();
        ///    }
        ///}.
        /// </summary>
        public static string point_shadow_geom {
            get {
                return ResourceManager.GetString("point_shadow_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///
        ///void main()
        ///{
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///    mat4 jointTransform = mat4(0.0);
        ///    for (int i = 0; i &lt; MAX_WEIGHTS; i++)
        ///    {
        ///        jointTransform += jointTransforms[int(vBoneIDs[i])] * vBoneWeights[i];
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        public static string point_shadow_skinning_vert {
            get {
                return ResourceManager.GetString("point_shadow_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440 core
        ///
        ///uniform mat4 modelMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///	gl_Position = modelMatrix * vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        public static string point_shadow_vert {
            get {
                return ResourceManager.GetString("point_shadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fColor;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = fColor;
        ///}.
        /// </summary>
        public static string rotation_frag {
            get {
                return ResourceManager.GetString("rotation_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///const float LINE_WIDTH = 0.075;
        ///const float BETWEEN_WIDTH = 0.075;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 45) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///out vec4 fColor;
        ///
        ///void drawArrow(mat4 viewProjectionMatrix, vec3 position, vec4 color, vec3 direction, vec3 perpendicular)
        ///{
        ///    fColor = color;
        ///
        ///    position -= perpendicular * (LINE_WIDTH / 2.0);
        ///    gl_Position = viewProjectionMatrix * vec4(position, 1.0) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string rotation_geom {
            get {
                return ResourceManager.GetString("rotation_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        public static string rotation_vert {
            get {
                return ResourceManager.GetString("rotation_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fColor;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = fColor;
        ///}.
        /// </summary>
        public static string scale_frag {
            get {
                return ResourceManager.GetString("scale_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///const float LINE_WIDTH = 0.05;
        ///const float BETWEEN_WIDTH = 0.025;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 48) out;
        ///
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform vec3 cameraPosition;
        ///
        ///out vec4 fColor;
        ///
        ///void drawArrow(mat4 viewProjectionMatrix, vec3 position, vec4 color, vec3 direction, vec3 perpendicular)
        ///{
        ///    fColor = color;
        ///
        ///    position -= perpendicular * (LINE_WIDTH / 2.0);
        ///    gl_Position = viewProjectionMatrix * vec4(position, 1.0); [rest of string was truncated]&quot;;.
        /// </summary>
        public static string scale_geom {
            get {
                return ResourceManager.GetString("scale_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        public static string scale_vert {
            get {
                return ResourceManager.GetString("scale_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap selected_directional_light {
            get {
                object obj = ResourceManager.GetObject("selected_directional_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap selected_point_light {
            get {
                object obj = ResourceManager.GetObject("selected_point_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap selected_spot_light {
            get {
                object obj = ResourceManager.GetObject("selected_spot_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fId;
        ///
        ///layout(location = 0) out vec4 color;
        ///
        ///void main()
        ///{
        ///    color = vec4(fId.xyz, 1.0);
        ///    //color = vec4(0, 1, 0, 1);
        ///}.
        /// </summary>
        public static string selection_frag {
            get {
                return ResourceManager.GetString("selection_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 fId;
        ///
        ///void main()
        ///{
        ///    mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
        ///
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string selection_skinning_vert {
            get {
                return ResourceManager.GetString("selection_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 fId;
        ///
        ///void main()
        ///{
        ///    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///	fId = vId;
        ///}.
        /// </summary>
        public static string selection_vert {
            get {
                return ResourceManager.GetString("selection_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] Sphere {
            get {
                object obj = ResourceManager.GetObject("Sphere", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap spot_light_billboard {
            get {
                object obj = ResourceManager.GetObject("spot_light_billboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D positionMap;
        ///uniform sampler2D colorMap;
        ///uniform sampler2D normalMap;
        ///uniform sampler2D diffuseMaterial;
        ///uniform sampler2D specularMap;
        ///uniform sampler2D shadowMap;
        ///
        ///uniform mat4 lightMatrix;
        ///
        ///uniform vec3 cameraPosition;
        ///uniform vec3 lightPosition;
        ///uniform float lightRadius;
        ///uniform float lightHeight;
        ///uniform vec3 lightVector;
        ///uniform float lightCutoffAngle;
        ///uniform vec3 lightColor;
        ///uniform float lightIntensity;
        ///
        ///layout(location = 0) out vec4 finalColor;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string spot_light_frag {
            get {
                return ResourceManager.GetString("spot_light_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D shadowMap;
        ///
        ///in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	float depth = texture(shadowMap, fUV).x;
        ///    depth = 1.0 - (1.0 - depth) * 25.0;
        ///
        ///    color = vec4(depth);
        ///}.
        /// </summary>
        public static string spot_shadow_frag {
            get {
                return ResourceManager.GetString("spot_shadow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///    mat4 jointTransform = mat4(0.0);
        ///    for (int i = 0; i &lt; MAX_WEIGHTS; i++)
        ///    {
        ///        jointT [rest of string was truncated]&quot;;.
        /// </summary>
        public static string spot_shadow_skinning_vert {
            get {
                return ResourceManager.GetString("spot_shadow_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///    //fUV = vUV;
        ///    fUV = vec2((vPosition.x + 1.0) * 0.5, (vPosition.y + 1.0) * 0.5);
        ///}.
        /// </summary>
        public static string spot_shadow_vert {
            get {
                return ResourceManager.GetString("spot_shadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] Square {
            get {
                object obj = ResourceManager.GetObject("Square", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec3 vPosition;
        ///
        ///void main()
        ///{
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///}.
        /// </summary>
        public static string stencil_vert {
            get {
                return ResourceManager.GetString("stencil_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform sampler2D textureSampler;
        ///uniform vec4 color;
        ///
        ///in vec2 fUV;
        ///out vec4 finalColor;
        ///
        ///void main()
        ///{
        ///	//color = texture(textureSampler, fUV);
        ///    
        ///	vec4 textureColor = texture(textureSampler, fUV);
        ///
        ///	if (textureColor.w == 1.0 &amp;&amp; (textureColor.x &gt; 0.0 || textureColor.y &gt; 0.0 || textureColor.z &gt; 0.0)) {
        ///		finalColor = color;
        ///	}
        ///	else {
        ///		finalColor = vec4(0.0, 0.0, 0.0, 0.0);
        ///	}
        ///
        ///	//color = vec4(1.0, 0.0, 0.0, 1.0);
        ///}.
        /// </summary>
        public static string text_frag {
            get {
                return ResourceManager.GetString("text_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform vec2 halfResolution;
        ///
        ///in vec2 vPosition;
        ///in vec2 vUV;
        ///
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    float x = (vPosition.x - halfResolution.x) / halfResolution.x;
        ///	float y = (halfResolution.y - vPosition.y) / halfResolution.y;
        ///    //float y = (vPosition.y - halfResolution.y) / halfResolution.y;
        ///
        ///	gl_Position = vec4(x, y, 0.0, 1.0);
        ///
        ///    //vec2 clipSpacePosition = vPosition - vec2();
        ///    //gl_Position = vec4((vPosition - halfResolution) / halfResolution, 0.0, 1.0);
        ///    fUV = vUV; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string text_vert {
            get {
                return ResourceManager.GetString("text_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        /////uniform sampler2D textureSampler;
        ///
        /////in vec3 fPosition;
        ///in vec4 fColor;
        ///in vec4 fId;
        /////in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	//color = texture(textureSampler, fUV);
        ///    //color = vec4(1.0, 0.0, 0.0, 1.0);
        ///	//color = vec4(1.0, 1.0, 0.0, fColor.w);
        ///	color = fColor;
        ///}.
        /// </summary>
        public static string ui_frag {
            get {
                return ResourceManager.GetString("ui_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform vec2 resolution;
        ///uniform vec2 halfResolution;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 1) in vec4 vColor;
        ///layout(location = 2) in vec4 vId;
        ///
        /////out vec3 fPosition;
        ///out vec4 fColor;
        ///out vec4 fId;
        /////out vec2 fUV;
        ///
        ///void main()
        ///{
        ///	vec4 position = vec4(vPosition.x, /*resolution.y - */vPosition.y, vPosition.z, 1.0);
        ///	vec4 clipPosition = modelMatrix * position;
        ///
        ///	// TODO - This will convert the position to being relative from the  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ui_vert {
            get {
                return ResourceManager.GetString("ui_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///#define PI 3.14159274
        ///#define HALF_PI = 1.57079637;
        ///
        /////uniform sampler2D textureSampler;
        ///
        ///in vec4 fColor;
        ///in vec2 fCornerRadius;
        ///in vec2 fBorderThickness;
        ///in vec4 fBorderColor;
        ///in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	//float maxY = fCornerRadius.y * sin(acos(fUV.x / fCornerRadius.x));
        ///
        ///	if (fUV.x &lt; fCornerRadius.x &amp;&amp; fUV.y &lt; fCornerRadius.y) {
        ///		// Bottom Left -&gt; X and Y are BOTH flipped
        ///		float x = fCornerRadius.x - fUV.x;
        ///		float minY = fCornerRadius.y - fCornerRa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string uiquad_frag {
            get {
                return ResourceManager.GetString("uiquad_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///uniform vec2 halfResolution;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 4) out;
        ///
        ///in vec3 gRight[];
        ///in vec3 gUp[];
        ///in vec2 gCornerRadius[];
        ///in vec2 gBorderThickness[];
        ///in vec4 gColor[];
        ///in vec4 gBorderColor[];
        ///
        ///out vec4 fColor;
        ///out vec2 fCornerRadius;
        ///out vec2 fBorderThickness;
        ///out vec4 fBorderColor;
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    vec3 position = gl_in[0].gl_Position.xyz;
        ///
        ///    fColor = gColor[0];
        ///    fCornerRadius = gCornerRadius[0];
        ///    fBorderThickne [rest of string was truncated]&quot;;.
        /// </summary>
        public static string uiquad_geom {
            get {
                return ResourceManager.GetString("uiquad_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///in vec4 fId;
        ///in vec2 fCornerRadius;
        ///in vec2 fBorderThickness;
        ///in vec2 fUV;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	if (fUV.x &lt; fCornerRadius.x &amp;&amp; fUV.y &lt; fCornerRadius.y) {
        ///		// Bottom Left -&gt; X and Y are BOTH flipped
        ///		float x = fCornerRadius.x - fUV.x;
        ///		float minY = fCornerRadius.y - fCornerRadius.y * sin(acos(x / fCornerRadius.x));
        ///
        ///		if (fUV.y &lt; minY) {
        ///			discard;
        ///		}
        ///	}
        ///	else if (fUV.x &lt; fCornerRadius.x &amp;&amp; fUV.y &gt; 1.0 - fCornerRadius.y) {
        ///		// Top Left -&gt; X is flipped
        ///		f [rest of string was truncated]&quot;;.
        /// </summary>
        public static string uiquad_selection_frag {
            get {
                return ResourceManager.GetString("uiquad_selection_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400
        ///
        ///uniform vec2 halfResolution;
        ///
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 4) out;
        ///
        ///in vec3 gRight[];
        ///in vec3 gUp[];
        ///in vec2 gCornerRadius[];
        ///in vec2 gBorderThickness[];
        ///in vec4 gId[];
        ///
        ///out vec4 fId;
        ///out vec2 fCornerRadius;
        ///out vec2 fBorderThickness;
        ///out vec2 fUV;
        ///
        ///void main()
        ///{
        ///    vec3 position = gl_in[0].gl_Position.xyz;
        ///
        ///    fId = gId[0];
        ///    fCornerRadius = gCornerRadius[0];
        ///    fBorderThickness = gBorderThickness[0];
        ///
        ///    vec3 right = gRight[0];
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        public static string uiquad_selection_geom {
            get {
                return ResourceManager.GetString("uiquad_selection_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform vec2 resolution;
        ///uniform vec2 halfResolution;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 1) in float vBorderThickness;
        ///layout(location = 2) in vec2 vSize;
        ///layout(location = 3) in vec2 vCornerRadius;
        ///layout(location = 6) in vec4 vId;
        ///
        ///out vec3 gRight;
        ///out vec3 gUp;
        ///out vec2 gCornerRadius;
        ///out vec2 gBorderThickness;
        ///out vec4 gId;
        ///
        ///void main()
        ///{
        ///	float x = (vPosition.x - halfResolution.x) / halfResolution.x;
        ///	float y = (halfResolution.y - vPosition.y) / [rest of string was truncated]&quot;;.
        /// </summary>
        public static string uiquad_selection_vert {
            get {
                return ResourceManager.GetString("uiquad_selection_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform vec2 resolution;
        ///uniform vec2 halfResolution;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 1) in float vBorderThickness;
        ///layout(location = 2) in vec2 vSize;
        ///layout(location = 3) in vec2 vCornerRadius;
        ///layout(location = 4) in vec4 vColor;
        ///layout(location = 5) in vec4 vBorderColor;
        ///
        ///out vec3 gRight;
        ///out vec3 gUp;
        ///out vec2 gCornerRadius;
        ///out vec2 gBorderThickness;
        ///out vec4 gColor;
        ///out vec4 gBorderColor;
        ///
        ///void main()
        ///{
        ///	float x = (vPosition.x - halfResolu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string uiquad_vert {
            get {
                return ResourceManager.GetString("uiquad_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap vertex {
            get {
                object obj = ResourceManager.GetObject("vertex", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform float lineThickness;
        ///uniform vec4 lineColor;
        ///uniform float selectedLineThickness;
        ///uniform vec4 selectedLineColor;
        ///
        ///smooth in vec3 gEdgeDistance;
        ///in vec4 fId;
        ///
        ///layout(location = 0) out vec4 color;
        ///
        ///void main()
        ///{
        ///    // For this triangle, find the minimum distance of any corner from the edge
        ///    float distance = min(gEdgeDistance[0], min(gEdgeDistance[1], gEdgeDistance[2]));
        ///
        ///    // Discard any fragments that are not close to the edge
        ///	float thickness = fId.w &lt; 1.0
        ///		? [rest of string was truncated]&quot;;.
        /// </summary>
        public static string wireframe_frag {
            get {
                return ResourceManager.GetString("wireframe_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///layout(triangles) in;
        ///layout(triangle_strip, max_vertices = 3) out;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///in vec4 gId[];
        ///
        ///smooth out vec3 gEdgeDistance;
        ///out vec4 fId;
        ///
        ///void main()
        ///{
        ///    float a = length(gl_in[1].gl_Position.xyz - gl_in[2].gl_Position.xyz);
        ///    float b = length(gl_in[2].gl_Position.xyz - gl_in[0].gl_Position.xyz);
        ///    float c = length(gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz);
        ///
        ///    float alpha = acos(( [rest of string was truncated]&quot;;.
        /// </summary>
        public static string wireframe_geom {
            get {
                return ResourceManager.GetString("wireframe_geom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///const int MAX_JOINTS = 100;
        ///const int MAX_WEIGHTS = 4;
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///uniform mat4[MAX_JOINTS] jointTransforms;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 5) in vec4 vBoneIDs;
        ///layout(location = 6) in vec4 vBoneWeights;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 gId;
        ///
        ///void main()
        ///{
        ///    mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;
        ///
        ///    vec4 position = vec4(vPosition, 1.0);
        ///
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string wireframe_skinning_vert {
            get {
                return ResourceManager.GetString("wireframe_skinning_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 440
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///layout(location = 0) in vec3 vPosition;
        ///layout(location = 7) in vec4 vId;
        ///
        ///out vec4 gId;
        ///
        ///void main()
        ///{
        ///    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vPosition, 1.0);
        ///	gId = vId;
        ///}.
        /// </summary>
        public static string wireframe_vert {
            get {
                return ResourceManager.GetString("wireframe_vert", resourceCulture);
            }
        }
    }
}
